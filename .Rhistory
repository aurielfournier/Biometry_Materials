# updating the raildata package
library(devtools)
library(roxygen2)
late14 <- c("scmsu2","scmsu3","m11","ts6a","ash","ts2a","ts4a","ccmsu2","kt9","kt6","dc22","dc20","os23","pooli")
early14 <- c("rail","sanctuary","sgd","sgb","pool2","pool2w","m13","m10","ts8a","ccmsu12","kt5","kt2","dc14","dc18","os21","poole","poolc")
late15 <- c("scmsu2","scmsu3","m11","ts6a","ash","ts2a","ts4a","ccmsu2","kt9","kt6","dc22","dc20","os23","pooli")
early15 <- c("rail","sanctuary","sgd","sgb","pool2","pool2w","m13","m10","ts8a","ccmsu12","kt5","kt2","dc14","dc18","os21","poole","poolc")
impound_treatments <- data.frame(year = c(rep(2014, length(late14)),rep(2014, length(early14)), rep(2015, length(late15)),rep(2015, length(early15))),
treat = c(rep("late", length(late14)),rep("early", length(early14)), rep("late", length(late15)),rep("early", length(early15))),
impound = c(late14, early14, late15, early15))
save(impound_treatments, file="~/raildata/data/impound_treatments.rda")
models <- load("~/manuscripts/Dissertation_Chapter_1_MO_Phenology/sarah_models.Rdata")
save(models, file="~/raildata/data/gdistsamp_models.rda")
vegDONE <- read.csv("~/data/veg_DONE.csv")
save(vegDONE, file="~/raildata/data/vegDONE.rda")
soraDONE <- read.csv("~/data/sora_DONE.csv")
save(soraDONE, file="~/raildata/data/soraDONE.rda")
waterfowl2014 <- read.csv("~/data/2014_waterfowl.csv")
save(waterfowl2014, file="~/raildata/data/waterfowl2014.rda")
waterfowl2015 <- read.csv("~/data/2015_waterfowl.csv")
save(waterfowl2015, file="~/raildata/data/waterfowl2015.rda")
allbirds <- read.csv("~/data/all_birds.csv")
save(allbirds, file="~/raildata/data/allbirds.rda")
allsurveys <- read.csv("~/data/all_surveys.csv")
save(allsurveys, file="~/raildata/data/allsurveys.rda")
allveg <- read.csv("~/data/all_veg.csv")
save(allveg, file="~/raildata/data/allveg.rda")
# documentation
setwd("~/raildata")
document()
#install
setwd("..")
install("raildata")
data(waterfowl2014)
waterfowl2014
data(waterfowl2015)
waterfowl2015
data("impound_treatments")
impound_treatments
data(allbirds)
allbirds
data(allsurveys)
allsurveys
data(allveg)
allveg
data(soraDONE)
soraDONE
data(vegDONE)
vegDONE
head(waterfowl2014)
head(waterfowl2015)
dim(waterfowl2015)
head(impound_treatments)
dim(impound_treatments)
setwd("~/raildata")
document()
#install
setwd("..")
install("raildata")
?waterfowl2014
display.brewer.all(n=NULL, type="all", select=NULL, exact.n=TRUE,colorblindFriendly=TRUE)
library(RColorBrewer)
display.brewer.all(n=NULL, type="all", select=NULL, exact.n=TRUE,colorblindFriendly=TRUE)
mypalette<-brewer.pal(2,"Set2")
mypalette<-brewer.pal(3,"Set2")
ggplot()+
geom_line(data=radish, aes(x=time, y=RAD_GROW, group=TREAT, color=TREAT))+
ggtitle("Radish growth over time")+
ylab("Radish growth (cm)")+
xlab("time")+
theme_krementz()+ # so this uses the custom theme we already built
theme(legend.background = element_rect(fill = "white"), # this makes the background of the legend white
legend.position = "top", # this tells ggplot where to put the legend
legend.direction = "horizontal" # this tells ggplot what direction to make the list
)+
scale_color_manual(name="Treatments",values=mypalette)
library(ggplot2)
ggplot()+
geom_line(data=radish, aes(x=time, y=RAD_GROW, group=TREAT, color=TREAT))+
ggtitle("Radish growth over time")+
ylab("Radish growth (cm)")+
xlab("time")+
theme_krementz()+ # so this uses the custom theme we already built
theme(legend.background = element_rect(fill = "white"), # this makes the background of the legend white
legend.position = "top", # this tells ggplot where to put the legend
legend.direction = "horizontal" # this tells ggplot what direction to make the list
)+
scale_color_manual(name="Treatments",values=mypalette)
setwd("~/Biometry_Materials")
radish <- read.csv("./20160128_biometry_lab_2_graphing/RAD_GROW.csv")
ggplot()+
geom_line(data=radish, aes(x=time, y=RAD_GROW, group=TREAT, color=TREAT))+
ggtitle("Radish growth over time")+
ylab("Radish growth (cm)")+
xlab("time")+
theme_krementz()+ # so this uses the custom theme we already built
theme(legend.background = element_rect(fill = "white"), # this makes the background of the legend white
legend.position = "top", # this tells ggplot where to put the legend
legend.direction = "horizontal" # this tells ggplot what direction to make the list
)+
scale_color_manual(name="Treatments",values=mypalette)
theme_krementz <- function(){
theme(axis.text.x = element_text(size=12,color="black"),
axis.text.y = element_text(size=12,color="black"),
axis.title.y=element_text(size=20),
plot.background = element_blank(),
panel.border=element_blank(),
panel.grid.major= element_line(colour=NA),
panel.grid.minor=element_line(colour=NA),
title=element_text(size=20),
panel.background = element_rect(fill = "white"),
axis.line=element_line(colour="black"),
strip.background=element_rect(fill="white", color="black"),
strip.text=element_text(size=15))
ggplot()+
geom_line(data=radish, aes(x=time, y=RAD_GROW, group=TREAT, color=TREAT))+
ggtitle("Radish growth over time")+
ylab("Radish growth (cm)")+
xlab("time")+
theme_krementz()+ # so this uses the custom theme we already built
theme(legend.background = element_rect(fill = "white"), # this makes the background of the legend white
legend.position = "top", # this tells ggplot where to put the legend
legend.direction = "horizontal" # this tells ggplot what direction to make the list
)+
scale_color_manual(name="Treatments",values=mypalette)
ggplot()+
geom_line(data=radish, aes(x=time, y=RAD_GROW, group=TREAT, color=TREAT))+
ggtitle("Radish growth over time")+
ylab("Radish growth (cm)")+
xlab("time")+
theme_krementz()+ # so this uses the custom theme we already built
theme(legend.background = element_rect(fill = "white"), # this makes the background of the legend white
legend.position = "top", # this tells ggplot where to put the legend
legend.direction = "horizontal")+ # this tells ggplot what direction to make the list
scale_color_manual(name="Treatments",values=mypalette)
)
ggplot()+
geom_line(data=radish, aes(x=time, y=RAD_GROW, group=TREAT, color=TREAT))+
ggtitle("Radish growth over time")+
ylab("Radish growth (cm)")+
xlab("time")+
theme_krementz()+ # so this uses the custom theme we already built
theme(legend.background = element_rect(fill = "white"), # this makes the background of the legend white
legend.position = "top", # this tells ggplot where to put the legend
legend.direction = "horizontal")+ # this tells ggplot what direction to make the list
scale_color_manual(name="Treatments",values=mypalette)
theme_krementz <- function(){
theme(axis.text.x = element_text(size=12,color="black"),
axis.text.y = element_text(size=12,color="black"),
axis.title.y=element_text(size=20),
plot.background = element_blank(),
panel.border=element_blank(),
panel.grid.major= element_line(colour=NA),
panel.grid.minor=element_line(colour=NA),
title=element_text(size=20),
panel.background = element_rect(fill = "white"),
axis.line=element_line(colour="black"),
strip.background=element_rect(fill="white", color="black"),
strip.text=element_text(size=15))
}
theme_krementz()
ggplot()+
geom_line(data=radish, aes(x=time, y=RAD_GROW, group=TREAT, color=TREAT))+
ggtitle("Radish growth over time")+
ylab("Radish growth (cm)")+
xlab("time")+
theme_krementz()+ # so this uses the custom theme we already built
theme(legend.background = element_rect(fill = "white"), # this makes the background of the legend white
legend.position = "top", # this tells ggplot where to put the legend
legend.direction = "horizontal")+ # this tells ggplot what direction to make the list
scale_color_manual(name="Treatments",values=mypalette)
radish$time <- c(rep(seq(1:(nrow(radish)/2)))) #lets pretend that there is a time variable here so we can make a line graph
ggplot()+
geom_line(data=radish, aes(x=time, y=RAD_GROW, group=TREAT, color=TREAT))+
ggtitle("Radish growth over time")+
ylab("Radish growth (cm)")+
xlab("time")+
theme_krementz()+ # so this uses the custom theme we already built
theme(legend.background = element_rect(fill = "white"), # this makes the background of the legend white
legend.position = "top", # this tells ggplot where to put the legend
legend.direction = "horizontal")+ # this tells ggplot what direction to make the list
scale_color_manual(name="Treatments",values=mypalette)
radish_group <- group_by(radish, TREAT)
library(dplyr)
library(gridExtra)
library(RColorBrewer)
library(ggthemes)
radish_group <- group_by(radish, TREAT)
radish_group <- group_by(radish, TREAT)
radish_sum <- summarise_each(radish_group, funs(min,max,mean,median))
radish_sum
radish_sum <- radish %>% group_by(TREAT) %>% summarise_each(funs(min, max, mean, median))
radish_sum
stem(radish[radish$TREAT=="DARK",]$RAD_GROW)
stem(radish[radish$TREAT=="LIGHT",]$RAD_GROW)
# Packages You Need
library(ggplot2) # graphing package
library(dplyr) # this package is very powerful for summarizing and manipulating data
library(gridExtra) # works with ggplot to create grids of graphs
library(ggthemes) # gives you additional ggplot themes
library(RColorBrewer) # this gives you custom color ramps, including color blind friendly stuff
radish <- read.csv("./20160128_biometry_lab_2_graphing/RAD_GROW.csv")
# Check to make sure the different columns were read in correctly
str(radish)
head(radish)
summary(radish)
radish_sum <- radish %>% group_by(TREAT) %>% summarise_each(funs(min, max, mean, median))
radish_sum
radish_group <- group_by(radish, TREAT)
radish_sum <- summarise_each(radish_group, funs(min,max,mean,median))
radish_sum
write.csv(radish_sum, "./20160128_biometry_lab_2_graphing/outputs/radish_sum.csv", row.names=FALSE)
chloro <- read.csv("./20160128_biometry_lab_2_graphing/Chlorophyll_e95_for_graph_lab.csv")
# Check to make sure the different columns were read in correctly
str(chloro)
head(chloro)
chloro_sum <- chloro[,c("Pool","DRYING","BASS","Chl_a_mg_m2")] %>% group_by(Pool,DRYING,BASS)  %>% summarise_each(funs(min, max, mean, median))
chloro_sum
write.csv(chloro_sum, "./20160128_biometry_lab_2_graphing/outputs/chloro_sum.csv", row.names =FALSE)
stem(radish[radish$TREAT=="DARK",]$RAD_GROW)
stem(radish[radish$TREAT=="LIGHT",]$RAD_GROW)
?geom_histogram
ggplot()+
geom_histogram(data=radish, aes(x=RAD_GROW))+
facet_wrap(~TREAT)+ # facet wrap means that it creates a seperate graph for each level of that covariate, in this case  treatment
theme_bw() # I don't like the default way that ggplots look, luckily there are lots of themes you can use (package ggthemes ha smore) or you can build your own. I have one called theme_krementz that I often use when making graphs for my adviser
# theme_bw will make a very plain graph.
ggplot()+
geom_histogram(data=radish, aes(x=RAD_GROW, group=TREAT, fill=TREAT), position="dodge")+ # we use 'position="dodge"' because we don't want the bars to over lab. you you can try it with and without to see the difference.
theme_bw()
ten <- data.frame(a=rnorm(10, 0,1))
hundred <- data.frame(a=rnorm(100,0,1))
thousand <- data.frame(a=rnorm(1000,0,1))
exp <- data.frame(a=rexp(1000,1))
unif <- data.frame(a=runif(1000,0,1))
(a <- ggplot()+
geom_histogram(data=ten, aes(x=a))+
theme_bw()+
xlim(-4,6))
(b <- ggplot()+
geom_histogram(data=hundred, aes(x=a))+
theme_bw()+
xlim(-4,6))
(c <- ggplot()+
geom_histogram(data=thousand, aes(x=a))+
theme_bw()+
xlim(-4,6))
(d <- ggplot()+
geom_histogram(data=exp, aes(x=a))+
theme_bw()+
xlim(-4,6))
(e <- ggplot()+
geom_histogram(data=unif, aes(x=a))+
theme_bw()+
xlim(-4,6))
grid.arrange(a,b,c,d,e, ncol=1)
grid.arrange(a,b,c,d,e, nrow=1)
ggsave(a, file="./20160128_biometry_lab_2_graphing/graph_a.png", width=5, height=5, units="cm", dpi=300)
# if you are trying to save a panel of graphs such as in grid.arrange you will need to use this method
# in png the dpi is res (for resolutino)
png(file="./20160128_biometry_lab_2_graphing/grid_arrange_graph.png", units="cm", width=10, height=18, res=300)
grid.arrange(a,b,c,d,e,ncol=1)
dev.off()
ggplot()+
geom_boxplot(data=radish, aes(x=TREAT, y=RAD_GROW))+
theme_bw()
ggplot()+
geom_boxplot(data=thousand, aes(y=a, x=1))+
theme_bw()
ggplot()+
geom_boxplot(data=exp, aes(y=a, x=1))+
theme_bw()
ggplot()+
geom_boxplot(data=unif, aes(y=a, x=1))+
theme_bw()
ggplot()+
stat_qq(data=thousand, aes(sample=a))+
theme_bw()
ggplot()+
stat_qq(data=exp, aes(sample=a))+
theme_bw()
ggplot()+
stat_qq(data=unif, aes(sample=a))+
theme_bw()
ggplot()+
stat_qq(data=radish, aes(sample=RAD_GROW, group=TREAT, color=TREAT))+ # so here we are using group and color arguments this tells ggplot that we want it to split out the points by treatment and to give each level of treatment a unique color.
theme_bw()
ggplot()+
geom_boxplot(data=radish, aes(x=TREAT, y=RAD_GROW))
ggplot()+
geom_boxplot(data=radish, aes(x=TREAT, y=RAD_GROW))+
ggtitle("TITLE HERE")+
xlab("text here")+
ylab("text here")
ggplot()+
geom_boxplot(data=radish, aes(x=TREAT, y=RAD_GROW))+
ggtitle("TITLE HERE")+
xlab("text here")+
ylab("text here") +
theme_bw()
ggplot()+
geom_boxplot(data=radish, aes(x=TREAT, y=RAD_GROW))+
ggtitle("TITLE HERE")+
xlab("text here")+
ylab("text here") +
theme_calc()
ggplot()+
geom_boxplot(data=radish, aes(x=TREAT, y=RAD_GROW))+
ggtitle("TITLE HERE")+
xlab("text here")+
ylab("text here") +
theme_economist()
ggplot()+
geom_boxplot(data=radish, aes(x=TREAT, y=RAD_GROW))+
ggtitle("TITLE HERE")+
xlab("text here")+
ylab("text here") +
theme_economist_white()
ggplot()+
geom_boxplot(data=radish, aes(x=TREAT, y=RAD_GROW))+
ggtitle("TITLE HERE")+
xlab("text here")+
ylab("text here") +
theme_few()
ggplot()+
geom_boxplot(data=radish, aes(x=TREAT, y=RAD_GROW))+
ggtitle("TITLE HERE")+
xlab("text here")+
ylab("text here") +
theme_gdocs()
ggplot()+
geom_boxplot(data=radish, aes(x=TREAT, y=RAD_GROW))+
ggtitle("TITLE HERE")+
xlab("text here")+
ylab("text here") +
theme_wsj()
ggplot()+
geom_boxplot(data=radish, aes(x=TREAT, y=RAD_GROW))+
ggtitle("TITLE HERE")+
xlab("text here")+
ylab("text here")+
theme_bw()+
theme(panel.grid=element_blank())
theme_krementz <- function(){
theme(axis.text.x = element_text(size=12,color="black", ang=90), # sets the size, color and angle of the x axis text
axis.text.y = element_text(size=12,color="black"), # sets the size and color of the y axis text
axis.title.y=element_text(size=20), # sets the size of the y axis title
plot.background = element_blank(), # makes teh plot background blank (this is the entire thing)
panel.border=element_blank(), # makes the panel border blank (this is the smaller box)
panel.grid.major= element_line(colour=NA),# remove major grid lines
panel.grid.minor=element_line(colour=NA), # remove the minor grid lines
title=element_text(size=20), # sets title size
panel.background = element_rect(fill = "red"), # sets teh
axis.line=element_line(colour="black"),
strip.background=element_rect(fill="white", color="black"),
strip.text=element_text(size=15))
}
ggplot()+
geom_boxplot(data=radish, aes(x=TREAT, y=RAD_GROW))+
ggtitle("TITLE HERE")+
xlab("text here")+
ylab("text here")+
theme_krementz()
theme_krementz <- function(){
theme(axis.text.x = element_text(size=12,color="black", ang=90), # sets the size, color and angle of the x axis text
axis.text.y = element_text(size=12,color="black"), # sets the size and color of the y axis text
axis.title.y=element_text(size=20), # sets the size of the y axis title
plot.background = element_blank(), # makes teh plot background blank (this is the entire thing)
panel.border=element_blank(), # makes the panel border blank (this is the smaller box)
panel.grid.major= element_line(colour=NA),# remove major grid lines
panel.grid.minor=element_line(colour=NA), # remove the minor grid lines
title=element_text(size=20), # sets title size
panel.background = element_rect(fill = "white"), # sets background of th smaller box
axis.line=element_line(colour="black"), # sets the color of the x and y axis lines, instead of having a box around the panel
strip.background=element_rect(fill="white", color="black"),  # when we use facet_wrap this is important
strip.text=element_text(size=15)) # when we use facet_wrap this is important
}
ggplot()+
geom_boxplot(data=radish, aes(x=TREAT, y=RAD_GROW))+
ggtitle("TITLE HERE")+
xlab("text here")+
ylab("text here")+
theme_krementz()
radish$time <- c(rep(seq(1:(nrow(radish)/2)))) #lets pretend that there is a time variable here so we can make a line graph
ggplot()+
geom_line(data=radish, aes(x=time, y=RAD_GROW, group=TREAT, color=TREAT))+
ggtitle("Radish growth over time")+
ylab("Radish growth (cm)")+
xlab("time")+
theme_krementz()+ # so this uses the custom theme we already built
theme(legend.background = element_rect(fill = "white"), # this makes the background of the legend white
legend.position = c(.15,.75), # this tells ggplot where to put the legend in exact coordinates
legend.direction = "vertical" # this tells ggplot what direction to make the list
)+
scale_color_discrete(name="Treatments")
# graph with interior legend
ggplot()+
geom_line(data=radish, aes(x=time, y=RAD_GROW, group=TREAT, color=TREAT))+
ggtitle("Radish growth over time")+
ylab("Radish growth (cm)")+
xlab("time")+
theme_krementz()+ # so this uses the custom theme we already built
theme(legend.background = element_rect(fill = "white"), # this makes the background of the legend white
legend.position = c(.15,.8), # this tells ggplot where to put the legend in exact coordinates
legend.direction = "vertical" # this tells ggplot what direction to make the list
)+
scale_color_discrete(name="Treatments")
ggplot()+
geom_line(data=radish, aes(x=time, y=RAD_GROW, group=TREAT, color=TREAT))+
ggtitle("Radish growth over time")+
ylab("Radish growth (cm)")+
xlab("time")+
theme_krementz()+ # so this uses the custom theme we already built
theme(legend.background = element_rect(fill = "white"), # this makes the background of the legend white
legend.position = c(.15,.85), # this tells ggplot where to put the legend in exact coordinates
legend.direction = "vertical" # this tells ggplot what direction to make the list
)+
scale_color_discrete(name="Treatments")
ggplot()+
geom_line(data=radish, aes(x=time, y=RAD_GROW, group=TREAT, color=TREAT))+
ggtitle("Radish growth over time")+
ylab("Radish growth (cm)")+
xlab("time")+
theme_krementz()+ # so this uses the custom theme we already built
theme(legend.background = element_rect(fill = "white"), # this makes the background of the legend white
legend.position = "top", # this tells ggplot where to put the legend
legend.direction = "horizontal" # this tells ggplot what direction to make the list
)+
scale_color_discrete(name="Treatments") # this titles the legend the "\n" is a line break
display.brewer.all(n=NULL, type="all", select=NULL, exact.n=TRUE,colorblindFriendly=TRUE)
mypalette<-brewer.pal(3,"Set2")
ggplot()+
geom_line(data=radish, aes(x=time, y=RAD_GROW, group=TREAT, color=TREAT))+
ggtitle("Radish growth over time")+
ylab("Radish growth (cm)")+
xlab("time")+
theme_krementz()+ # so this uses the custom theme we already built
theme(legend.background = element_rect(fill = "white"), # this makes the background of the legend white
legend.position = "top", # this tells ggplot where to put the legend
legend.direction = "horizontal")+ # this tells ggplot what direction to make the list
scale_color_manual(name="Treatments",values=mypalette)
